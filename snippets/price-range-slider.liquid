<style>
    .range_container {
    display: flex;
    flex-direction: column;
    padding-top: 40px;
    margin-top: 40px;
    margin-bottom:40px;
    border-top: 1px solid #eee;
  }
  .range_container h4{
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    letter-spacing: 2.24px;
    text-transform: uppercase;
    margin-bottom: 40px;
  }
  .sliders_control {
    position: relative;
    min-height: 20px;
  }

  .form_control {
    position: relative;
    display: flex;
    justify-content: space-between;
    font-size: 16px;
    color: #895f67;
  }

  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
    border:none;
  }

  input[type=range]::-moz-range-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
    border:none;
  }

  input[type=range]::-webkit-slider-thumb:hover {
    background: #f7f7f7;
  }

  /* input[type=range]::-webkit-slider-thumb:active {
    box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
  }
 */
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    height: 2px;
    width: 100%;
    position: absolute;
    background-color: #C6C6C6;
    pointer-events: none;
    padding:0;
    border:none;
  }

  #fromSlider {
    height: 0;
    z-index: 1;
  }
</style>
<div class="range_container">
  <h4>Price</h4>
  
  <div class="sliders_control">
    <input id="fromSlider" type="range" value="{{ lowest_price }}" min="{{ lowest_price }}" max="{{ highest_price }}">
    <input id="toSlider" type="range" value="{{ highest_price }}" min="{{ lowest_price }}" max="{{ highest_price }}">
  </div>
  <div class="form_control">
    <div class="form_control_container">
      <div class="form_control_container__time" id="fromInput">{{ lowest_price | times:100 | money }}</div>
      <!-- <input class="form_control_container__time__input"  type="number" id="fromInput" step="0.1" value="{{ lowest_price }}" min="{{ lowest_price }}" max="{{ highest_price }}"> -->
    </div>
    <div class="form_control_container">
      <div class="form_control_container__time" id="toInput">{{ highest_price | times:100 | money }}</div>
      <!-- <input class="form_control_container__time__input" type="number" id="toInput" step="0.1" value="{{ highest_price }}" min="{{ lowest_price }}" max="{{ highest_price }}"> -->
    </div>
  </div>
</div>

<script>
  function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
      const [from, to] = getParsed(fromInput, toInput);
      fillSlider(fromInput, toInput, '#C6C6C6', '#c5a04c', controlSlider);
      if (from > to) {
          fromSlider.value = to;
          fromInput.value = to;
      } else {
          fromSlider.value = from;
      }
  }
      
  function controlToInput(toSlider, fromInput, toInput, controlSlider) {
      const [from, to] = getParsed(fromInput, toInput);
      fillSlider(fromInput, toInput, '#C6C6C6', '#c5a04c', controlSlider);
      setToggleAccessible(toInput);
      if (from <= to) {
          toSlider.value = to;
          toInput.value = to;
      } else {
          toInput.value = from;
      }
  }
  
  function controlFromSlider(fromSlider, toSlider, fromInput) {
    const [from, to] = getParsed(fromSlider, toSlider);
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#c5a04c', toSlider);
    if (from > to) {
      fromSlider.value = to;
      fromInput.value = to;
      
    } else {
      fromInput.value = from;
    }
    fromInput.innerText = '$' + from.toFixed(2);
    toInput.innerText = '$' + to.toFixed(2);

    filterByRange(from, to);
  }
  
  function controlToSlider(fromSlider, toSlider, toInput) {
    const [from, to] = getParsed(fromSlider, toSlider);
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#c5a04c', toSlider);
    
    setToggleAccessible(toSlider);
    if (from <= to) {
      toSlider.value = to;
      toInput.value = to;
      
    } else {
      toInput.value = from;
      toSlider.value = to;
    }

    fromInput.innerText = '$' + from.toFixed(2);
    toInput.innerText = '$' + to.toFixed(2);

    filterByRange(from, to);
  }
  
  function getParsed(currentFrom, currentTo) {
    const from = parseInt(currentFrom.value, 10);
    const to = parseInt(currentTo.value, 10);
    return [from, to];
  }
  
  function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
      const rangeDistance = to.max-to.min;
      const fromPosition = from.value - to.min;
      const toPosition = to.value - to.min;
      controlSlider.style.background = `linear-gradient(
        to right,
        ${sliderColor} 0%,
        ${sliderColor} ${(fromPosition)/(rangeDistance)*100}%,
        ${rangeColor} ${((fromPosition)/(rangeDistance))*100}%,
        ${rangeColor} ${(toPosition)/(rangeDistance)*100}%, 
        ${sliderColor} ${(toPosition)/(rangeDistance)*100}%, 
        ${sliderColor} 100%)`;
  }
  
  function setToggleAccessible(currentTarget) {
    const toSlider = document.querySelector('#toSlider');
    if (Number(currentTarget.value) <= 0 ) {
      toSlider.style.zIndex = 2;
    } else {
      toSlider.style.zIndex = 0;
    }
  }

  function filterByRange(from , to){
    console.log(from, to)
    $('.collection-box-item[data-price]').each(function(){
      var price = Number($(this).data('price'))
      if(price >= from && price <= to){
        $(this).removeClass('displayNone')
      }else{
        $(this).addClass('displayNone')
      }
    })
  }
  
  const fromSlider = document.querySelector('#fromSlider');
  const toSlider = document.querySelector('#toSlider');
  const fromInput = document.querySelector('#fromInput');
  const toInput = document.querySelector('#toInput');
  fillSlider(fromSlider, toSlider, '#C6C6C6', '#c5a04c', toSlider);
  setToggleAccessible(toSlider);
  
  fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
  toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
  //fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
  //toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
</script>
